/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gallagherspos;

import javax.swing.JOptionPane;

/**
 *
 * @author TrollOutpost
 */
public class AppetizerMenu extends javax.swing.JFrame {
    String message;
    MainMenu mainMenu;
    /**
     * Creates new form AppetizerMenu
     */
    public AppetizerMenu(MainMenu mm) {
        initComponents();
        appetizerGroup.add(selectBoneChickWings);
        appetizerGroup.add(selectBowlSOTD);
        appetizerGroup.add(selectBrdStick);
        appetizerGroup.add(selectBreadMush);
        appetizerGroup.add(selectBuffChickWing);
        appetizerGroup.add(selectChickStrip);
        appetizerGroup.add(selectChsCurd);
        appetizerGroup.add(selectCupSOTD);
        appetizerGroup.add(selectGallBread);
        appetizerGroup.add(selectGarBread);
        appetizerGroup.add(selectGarBreadChs);
        appetizerGroup.add(selectHoneyDippeChickWings);
        appetizerGroup.add(selectJalaPop);
        appetizerGroup.add(selectLrgFri);
        appetizerGroup.add(selectMineBowl);
        appetizerGroup.add(selectMineCup);
        appetizerGroup.add(selectMozzStick);
        appetizerGroup.add(selectOR);
        appetizerGroup.add(selectSmallFri);
        appetizerGroup.add(selectSpinTomGar);
        appetizerGroup.add(selectStuffMush);
        appetizerGroup.add(selectSupCombo);
        mainMenu = mm;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        appetizerGroup = new javax.swing.ButtonGroup();
        lblMenuHeader = new javax.swing.JLabel();
        bMessage = new javax.swing.JButton();
        bSubmit = new javax.swing.JButton();
        bDone = new javax.swing.JButton();
        selectMineCup = new javax.swing.JRadioButton();
        selectMineBowl = new javax.swing.JRadioButton();
        selectCupSOTD = new javax.swing.JRadioButton();
        selectBowlSOTD = new javax.swing.JRadioButton();
        selectBuffChickWing = new javax.swing.JRadioButton();
        selectGallBread = new javax.swing.JRadioButton();
        selectHoneyDippeChickWings = new javax.swing.JRadioButton();
        selectBoneChickWings = new javax.swing.JRadioButton();
        selectChickStrip = new javax.swing.JRadioButton();
        selectSmallFri = new javax.swing.JRadioButton();
        selectLrgFri = new javax.swing.JRadioButton();
        selectBreadMush = new javax.swing.JRadioButton();
        selectStuffMush = new javax.swing.JRadioButton();
        selectChsCurd = new javax.swing.JRadioButton();
        selectMozzStick = new javax.swing.JRadioButton();
        selectBrdStick = new javax.swing.JRadioButton();
        selectGarBread = new javax.swing.JRadioButton();
        selectGarBreadChs = new javax.swing.JRadioButton();
        selectSpinTomGar = new javax.swing.JRadioButton();
        selectJalaPop = new javax.swing.JRadioButton();
        selectOR = new javax.swing.JRadioButton();
        selectSupCombo = new javax.swing.JRadioButton();
        bClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblMenuHeader.setText("Appetizers");

        bMessage.setText("Message");
        bMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMessageActionPerformed(evt);
            }
        });

        bSubmit.setText("Submit");
        bSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSubmitActionPerformed(evt);
            }
        });

        bDone.setText("Done");
        bDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDoneActionPerformed(evt);
            }
        });

        selectMineCup.setText("Cup Minestrone");

        selectMineBowl.setText("Bowl Minestrone");

        selectCupSOTD.setText("Cup - Soup of the Day");

        selectBowlSOTD.setText("Bowl - Soup of the Day");

        selectBuffChickWing.setText("Buffalo Chicken Wings");

        selectGallBread.setText("Gallagher's Bread");

        selectHoneyDippeChickWings.setText("Honey Dipped Chicken Wings");

        selectBoneChickWings.setText("Boneless Chicken Wings");

        selectChickStrip.setText("Chicken Strips");

        selectSmallFri.setText("Small Fries");

        selectLrgFri.setText("Large Fries");

        selectBreadMush.setText("Breaded Mushrooms");

        selectStuffMush.setText("Stuffed Mushroom Caps");

        selectChsCurd.setText("Cheese Curds");

        selectMozzStick.setText("Mozzarella Sticks");

        selectBrdStick.setText("Bread Sticks");

        selectGarBread.setText("Garlic Bread");

        selectGarBreadChs.setText("Garlic Bread w/ Cheese");

        selectSpinTomGar.setText("Spinach Tomato Garlic Bread w/ Cheese");

        selectJalaPop.setText("Jalapeno Poppers");

        selectOR.setText("Onion Rings");

        selectSupCombo.setText("Supreme Combo Appetizer Basket");

        bClear.setText("Clear all");
        bClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(287, 287, 287)
                                .addComponent(lblMenuHeader))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(selectMineBowl)
                                    .addComponent(selectCupSOTD))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(selectMineCup)
                                    .addComponent(selectGarBreadChs)
                                    .addComponent(selectSpinTomGar)
                                    .addComponent(selectBowlSOTD)
                                    .addComponent(selectJalaPop)
                                    .addComponent(selectOR)
                                    .addComponent(selectSupCombo))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(selectBrdStick)
                                            .addComponent(selectGarBread))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 133, Short.MAX_VALUE)
                                        .addComponent(bMessage)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(bSubmit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(bDone, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(selectGallBread)
                                            .addComponent(selectBuffChickWing)
                                            .addComponent(selectHoneyDippeChickWings)
                                            .addComponent(selectBoneChickWings)
                                            .addComponent(selectChickStrip)
                                            .addComponent(selectSmallFri)
                                            .addComponent(selectLrgFri)
                                            .addComponent(selectBreadMush)
                                            .addComponent(selectStuffMush)
                                            .addComponent(selectChsCurd)
                                            .addComponent(selectMozzStick))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(bClear, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(bMessage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(bSubmit)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(bDone)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblMenuHeader)
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(selectMineCup)
                            .addComponent(selectBuffChickWing))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(selectMineBowl)
                            .addComponent(selectGallBread))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(selectCupSOTD)
                            .addComponent(selectHoneyDippeChickWings))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(selectBowlSOTD)
                            .addComponent(selectBoneChickWings))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectChickStrip)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectSmallFri)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(selectLrgFri)
                            .addComponent(selectGarBreadChs))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(selectBreadMush)
                            .addComponent(selectSpinTomGar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(selectStuffMush)
                            .addComponent(selectJalaPop))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(selectChsCurd)
                            .addComponent(selectOR))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(selectMozzStick)
                            .addComponent(selectSupCombo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectBrdStick)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectGarBread)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bClear))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDoneActionPerformed
        this.dispose();
    }//GEN-LAST:event_bDoneActionPerformed

    private void bMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMessageActionPerformed
        message = JOptionPane.showInputDialog(null, "Enter Message:");
    }//GEN-LAST:event_bMessageActionPerformed

    private void bClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bClearActionPerformed
        int sure = JOptionPane.showConfirmDialog(null, "Are you sure?");
        if(sure == JOptionPane.YES_OPTION) {
            appetizerGroup.clearSelection();
        }
    }//GEN-LAST:event_bClearActionPerformed

    private void bSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSubmitActionPerformed
        if(checkButtons()) {
            OrderItem oi = new OrderItem();
            oi.setMessage(message);
            oi.setPrice(getPrice());
            oi.setName(getName());
            mainMenu.addToOrder(oi);
        }
        appetizerGroup.clearSelection();
        
    }//GEN-LAST:event_bSubmitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppetizerMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppetizerMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppetizerMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppetizerMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
    //            new AppetizerMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup appetizerGroup;
    private javax.swing.JButton bClear;
    private javax.swing.JButton bDone;
    private javax.swing.JButton bMessage;
    private javax.swing.JButton bSubmit;
    private javax.swing.JLabel lblMenuHeader;
    private javax.swing.JRadioButton selectBoneChickWings;
    private javax.swing.JRadioButton selectBowlSOTD;
    private javax.swing.JRadioButton selectBrdStick;
    private javax.swing.JRadioButton selectBreadMush;
    private javax.swing.JRadioButton selectBuffChickWing;
    private javax.swing.JRadioButton selectChickStrip;
    private javax.swing.JRadioButton selectChsCurd;
    private javax.swing.JRadioButton selectCupSOTD;
    private javax.swing.JRadioButton selectGallBread;
    private javax.swing.JRadioButton selectGarBread;
    private javax.swing.JRadioButton selectGarBreadChs;
    private javax.swing.JRadioButton selectHoneyDippeChickWings;
    private javax.swing.JRadioButton selectJalaPop;
    private javax.swing.JRadioButton selectLrgFri;
    private javax.swing.JRadioButton selectMineBowl;
    private javax.swing.JRadioButton selectMineCup;
    private javax.swing.JRadioButton selectMozzStick;
    private javax.swing.JRadioButton selectOR;
    private javax.swing.JRadioButton selectSmallFri;
    private javax.swing.JRadioButton selectSpinTomGar;
    private javax.swing.JRadioButton selectStuffMush;
    private javax.swing.JRadioButton selectSupCombo;
    // End of variables declaration//GEN-END:variables

    private double getPrice() {
        double price = 0.0;
        if(selectBoneChickWings.isSelected()) {
            price += Prices.BONELESS_WINGS_PRICE;
        } else if(selectBowlSOTD.isSelected()) {
            price += Prices.SOTD_BOWL_PRICE;
        } else if(selectBrdStick.isSelected()) {
            price += Prices.BREAD_STICKS_PRICE;
        } else if(selectBreadMush.isSelected()) {
            price += Prices.BREADED_MUSHROOMS_PRICE;
        } else if(selectBuffChickWing.isSelected()) {
            price += Prices.BUFFALO_WINGS_PRICE;
        } else if(selectChickStrip.isSelected()) {
            price += Prices.CHICKEN_STRIPS_PRICE;
        } else if(selectChsCurd.isSelected()) {
            price += Prices.CHEESE_CURDS_PRICE;
        } else if(selectCupSOTD.isSelected()) {
            price += Prices.SOTD_CUP_PRICE;
        } else if(selectGallBread.isSelected()) {
            price += Prices.GALLAGHER_BREAD_PRICE;
        } else if(selectGarBread.isSelected()) {
            price += Prices.GARLIC_BREAD_PRICE;
        } else if(selectGarBreadChs.isSelected()) {
            price += Prices.GARLIC_BREAD_CHEESE_PRICE;
        } else if(selectHoneyDippeChickWings.isSelected()) {
            price += Prices.HONEY_WINGS_PRICE;
        } else if(selectJalaPop.isSelected()) {
            price += Prices.JALAPENO_POPPERS_PRICE;
        } else if(selectLrgFri.isSelected()) {
            price += Prices.FRENCH_FRIES_LARGE_PRICE;
        } else if(selectMineBowl.isSelected()) {
            price += Prices.MINESTRONE_BOWL_PRICE;
        } else if(selectMineCup.isSelected()) {
            price += Prices.MINESTRONE_CUP_PRICE;
        } else if(selectMozzStick.isSelected()) {
            price += Prices.MOZZARELLA_STICKS_PRICE;
        } else if(selectOR.isSelected()) {
            price += Prices.ONION_RINGS_PRICE;
        } else if(selectSmallFri.isSelected()) {
            price += Prices.FRENCH_FRIES_SMALL_PRICE;
        } else if(selectSpinTomGar.isSelected()) {
            price += Prices.SPINACH_TOMATO_BREAD_PRICE;
        } else if(selectStuffMush.isSelected()) {
            price += Prices.STUFFED_MUSHROOM_CAPS_PRICE;
        } else if(selectSupCombo.isSelected()) {
            price += Prices.APPETIZER_BASKET_PRICE;
        }
        
        return price;
    }
    @Override
    public String getName() {
        String theName = "";
        if(selectBoneChickWings.isSelected()) {
            theName += "Boneless Chicken Wings";
        } else if(selectBowlSOTD.isSelected()) {
            theName += "Bowl - Soup of the Day";
        } else if(selectBrdStick.isSelected()) {
            theName += "Bread Sticks";
        } else if(selectBreadMush.isSelected()) {
            theName += "Breaded Mushrooms";
        } else if(selectBuffChickWing.isSelected()) {
            theName += "Buffalo Chicken Wings";
        } else if(selectChickStrip.isSelected()) {
            theName += "Chicken Strips";
        } else if(selectChsCurd.isSelected()) {
            theName += "Cheese Curds";
        } else if(selectCupSOTD.isSelected()) {
            theName += "Cup - Soup of the Day";
        } else if(selectGallBread.isSelected()) {
            theName += "Gallagher's Bread";
        } else if(selectGarBread.isSelected()) {
            theName += "Garlic Bread";
        } else if(selectGarBreadChs.isSelected()) {
            theName += "Garlic Bread w/ Cheese";
        } else if(selectHoneyDippeChickWings.isSelected()) {
            theName += "Honey Dipped Chicken Wings";
        } else if(selectJalaPop.isSelected()) {
            theName += "Jalapenos Poppers";
        } else if(selectLrgFri.isSelected()) {
            theName += "Large Fries";
        } else if(selectMineBowl.isSelected()) {
            theName += "Bowl - Minestrone";
        } else if(selectMineCup.isSelected()) {
            theName += "Cup - Minestrone";
        } else if(selectMozzStick.isSelected()) {
            theName += "Mozzarella Sticks";
        } else if(selectOR.isSelected()) {
            theName += "Onion Rings";
        } else if(selectSmallFri.isSelected()) {
            theName += "Small Fries";
        } else if(selectSpinTomGar.isSelected()) {
            theName += "Spinach Tomato Garlic Bread";
        } else if(selectStuffMush.isSelected()) {
            theName += "Stuffed Mushroom Caps";
        } else if(selectSupCombo.isSelected()) {
            theName += "Appetizer Combo Basket";
        }
        return theName;
    }

    private boolean checkButtons() {
        boolean check = false;
        if(selectBoneChickWings.isSelected()) {
            check = true;
        } else if(selectBowlSOTD.isSelected()) {
            check = true;
        } else if(selectBrdStick.isSelected()) {
            check = true;
        } else if(selectBreadMush.isSelected()) {
            check = true;
        } else if(selectBuffChickWing.isSelected()) {
            check = true;
        } else if(selectChickStrip.isSelected()) {
            check = true;
        } else if(selectChsCurd.isSelected()) {
            check = true;
        } else if(selectCupSOTD.isSelected()) {
            check = true;
        } else if(selectGallBread.isSelected()) {
            check = true;
        } else if(selectGarBread.isSelected()) {
            check = true;
        } else if(selectGarBreadChs.isSelected()) {
            check = true;
        } else if(selectHoneyDippeChickWings.isSelected()) {
            check = true;
        } else if(selectJalaPop.isSelected()) {
            check = true;
        } else if(selectLrgFri.isSelected()) {
            check = true;
        } else if(selectMineBowl.isSelected()) {
            check = true;
        } else if(selectMineCup.isSelected()) {
            check = true;
        } else if(selectMozzStick.isSelected()) {
            check = true;
        } else if(selectOR.isSelected()) {
            check = true;
        } else if(selectSmallFri.isSelected()) {
            check = true;
        } else if(selectSpinTomGar.isSelected()) {
            check = true;
        } else if(selectStuffMush.isSelected()) {
            check = true;
        } else if(selectSupCombo.isSelected()) {
            check = true;
        }
        return check;
    }
}
