/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gallagherspos;

import javax.swing.JOptionPane;

/**
 *
 * @author TrollOutpost
 */
public class SpecialtyMenu extends javax.swing.JFrame {
    MainMenu mainMenu;
    String message;
    /**
     * Creates new form SpecialtyMenu
     */
    public SpecialtyMenu(MainMenu mm) {
        initComponents();
        dessertGroup.add(selectCheesecake);
        dessertGroup.add(selectChocReason);
        dessertGroup.add(selectTurtleCheesecake);
        dessertGroup.add(selectCookie);
        dessertGroup.add(selectDozen);
        
        specialGroup.add(selectCFC);
        specialGroup.add(selectChickBasket);
        specialGroup.add(selectCod);
        specialGroup.add(selectFullRibs);
        specialGroup.add(selectHalfRibs);
        specialGroup.add(selectLakePerch);
        specialGroup.add(selectShrimpBasket);
        mainMenu = mm;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        specialGroup = new javax.swing.ButtonGroup();
        dessertGroup = new javax.swing.ButtonGroup();
        lblHeader = new javax.swing.JLabel();
        selectHalfRibs = new javax.swing.JRadioButton();
        selectFullRibs = new javax.swing.JRadioButton();
        selectCFC = new javax.swing.JRadioButton();
        selectChickBasket = new javax.swing.JRadioButton();
        selectCod = new javax.swing.JRadioButton();
        selectLakePerch = new javax.swing.JRadioButton();
        selectShrimpBasket = new javax.swing.JRadioButton();
        bMessage = new javax.swing.JButton();
        bSubmit = new javax.swing.JButton();
        bDone = new javax.swing.JButton();
        lblMain = new javax.swing.JLabel();
        lblDessert = new javax.swing.JLabel();
        selectCheesecake = new javax.swing.JRadioButton();
        selectTurtleCheesecake = new javax.swing.JRadioButton();
        selectChocReason = new javax.swing.JRadioButton();
        selectCookie = new javax.swing.JRadioButton();
        selectDozen = new javax.swing.JRadioButton();
        bClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblHeader.setText("Specialties");

        selectHalfRibs.setText("Half Rack Ribs");

        selectFullRibs.setText("Full Rack Ribs");

        selectCFC.setText("Country Fried Chicken");

        selectChickBasket.setText("Chicken Strip Basket");

        selectCod.setText("Cod Basket");

        selectLakePerch.setText("Lake Perch Dinner");

        selectShrimpBasket.setText("Shrimp Basket");

        bMessage.setText("Message");
        bMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMessageActionPerformed(evt);
            }
        });

        bSubmit.setText("Submit");
        bSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSubmitActionPerformed(evt);
            }
        });

        bDone.setText("Done");
        bDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDoneActionPerformed(evt);
            }
        });

        lblMain.setText("Main Courses");

        lblDessert.setText("Desserts");

        selectCheesecake.setText("Cheesecake");

        selectTurtleCheesecake.setText("Turtle Cheesecake");

        selectChocReason.setText("Chocolate Beyond Reason");

        selectCookie.setText("Cookie");

        selectDozen.setText("Dozen Cookies");

        bClear.setText("Clear all");
        bClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblHeader)
                        .addGap(197, 197, 197))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectShrimpBasket)
                            .addComponent(selectHalfRibs)
                            .addComponent(selectFullRibs)
                            .addComponent(selectCFC)
                            .addComponent(selectChickBasket)
                            .addComponent(selectCod)
                            .addComponent(selectLakePerch)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblMain)
                                .addGap(72, 72, 72)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(169, 169, 169)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bClear, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(bMessage)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(bSubmit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(bDone, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(selectCheesecake)
                                    .addComponent(lblDessert)
                                    .addComponent(selectTurtleCheesecake)
                                    .addComponent(selectChocReason)
                                    .addComponent(selectCookie)
                                    .addComponent(selectDozen))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(lblHeader)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblMain)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectHalfRibs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectFullRibs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectCFC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectChickBasket)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectCod)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectLakePerch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectShrimpBasket))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDessert)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectCheesecake)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectTurtleCheesecake)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectChocReason)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectCookie)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectDozen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bMessage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bSubmit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bDone)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bClear)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDoneActionPerformed
        this.dispose();
    }//GEN-LAST:event_bDoneActionPerformed

    private void bMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMessageActionPerformed
        message = JOptionPane.showInputDialog(null, "Enter Message:");
    }//GEN-LAST:event_bMessageActionPerformed

    private void bClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bClearActionPerformed
        int sure = JOptionPane.showConfirmDialog(null, "Are you sure?");
        if(sure == JOptionPane.YES_OPTION) {
            dessertGroup.clearSelection();
            specialGroup.clearSelection();
        }
    }//GEN-LAST:event_bClearActionPerformed

    private void bSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSubmitActionPerformed
        if(checkButtons()) {
            OrderItem oi = new OrderItem();
            oi.setMessage(message);
            oi.setName(getTheName());
            oi.setPrice(getPrice());
            mainMenu.addToOrder(oi);
        }
        
    }//GEN-LAST:event_bSubmitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SpecialtyMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SpecialtyMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SpecialtyMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SpecialtyMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new SpecialtyMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bClear;
    private javax.swing.JButton bDone;
    private javax.swing.JButton bMessage;
    private javax.swing.JButton bSubmit;
    private javax.swing.ButtonGroup dessertGroup;
    private javax.swing.JLabel lblDessert;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblMain;
    private javax.swing.JRadioButton selectCFC;
    private javax.swing.JRadioButton selectCheesecake;
    private javax.swing.JRadioButton selectChickBasket;
    private javax.swing.JRadioButton selectChocReason;
    private javax.swing.JRadioButton selectCod;
    private javax.swing.JRadioButton selectCookie;
    private javax.swing.JRadioButton selectDozen;
    private javax.swing.JRadioButton selectFullRibs;
    private javax.swing.JRadioButton selectHalfRibs;
    private javax.swing.JRadioButton selectLakePerch;
    private javax.swing.JRadioButton selectShrimpBasket;
    private javax.swing.JRadioButton selectTurtleCheesecake;
    private javax.swing.ButtonGroup specialGroup;
    // End of variables declaration//GEN-END:variables

    private double getPrice() {
        double thePrice = 0.0;
        if(selectCFC.isSelected()) {
            thePrice += Prices.FRIED_CHICKEN_PRICE;
        } else if(selectCheesecake.isSelected()) {
            thePrice += Prices.CHEESECAKE_PRICE;
        } else if(selectChickBasket.isSelected()) {
            thePrice += Prices.CHICKEN_STRIP_BASKET;
        } else if(selectChocReason.isSelected()) {
            thePrice += Prices.CHOCOLATE_BEYOND_REASON_PRICE;
        } else if(selectCod.isSelected()) {
            thePrice += Prices.COD_BASKET_PRICE;
        } else if(selectCookie.isSelected()) {
            thePrice += Prices.COOKIE_PRICE;
        } else if(selectDozen.isSelected()) {
            thePrice += Prices.DOZEN_COOKIES_PRICE;
        } else if(selectFullRibs.isSelected()) {
            thePrice += Prices.BBQ_RIBS_FULL_PRICE;
        } else if(selectHalfRibs.isSelected()) {
            thePrice += Prices.BBQ_RIBS_HALF_PRICE;
        } else if(selectLakePerch.isSelected()) {
            thePrice += Prices.PERCH_DINNER_PRICE;
        } else if(selectShrimpBasket.isSelected()) {
            thePrice += Prices.SHRIMP_PRICE;
        } else if(selectTurtleCheesecake.isSelected()) {
            thePrice += Prices.TURTLE_CHEESECAKE_PRICE;
        }
        return thePrice;
    }
    
    private String getTheName() {
        String theName = "";
        if(selectCFC.isSelected()) {
            theName += "Country Fried Chicken";
        } else if(selectCheesecake.isSelected()) {
            theName += "New York Style Cheesecake";
        } else if(selectChickBasket.isSelected()) {
            theName += "Chicken Strip Basket";
        } else if(selectChocReason.isSelected()) {
            theName += "Chocolate Beyond Reason";
        } else if(selectCod.isSelected()) {
            theName += "Cod Basket";
        } else if(selectCookie.isSelected()) {
            theName += "Cookie";
        } else if(selectDozen.isSelected()) {
            theName += "Dozen Cookies";
        } else if(selectFullRibs.isSelected()) {
            theName += "Full Rack Ribs";
        } else if(selectHalfRibs.isSelected()) {
            theName += "Half Rack Ribs";
        } else if(selectLakePerch.isSelected()) {
            theName += "Lake Perch Dinner";
        } else if(selectShrimpBasket.isSelected()) {
            theName += "Shrimp Basket";
        } else if(selectTurtleCheesecake.isSelected()) {
            theName += "Turtle Cheesecake";
        }
        return theName;
    }

    private boolean checkButtons() {
        boolean check = false;
        if(selectCFC.isSelected()) {
            check = true;
        } else if(selectCheesecake.isSelected()) {
            check = true;
        } else if(selectChickBasket.isSelected()) {
            check = true;
        } else if(selectChocReason.isSelected()) {
            check = true;
        } else if(selectCod.isSelected()) {
            check = true;
        } else if(selectCookie.isSelected()) {
            check = true;
        } else if(selectDozen.isSelected()) {
            check = true;
        } else if(selectFullRibs.isSelected()) {
            check = true;
        } else if(selectHalfRibs.isSelected()) {
            check = true;
        } else if(selectLakePerch.isSelected()) {
            check = true;
        } else if(selectShrimpBasket.isSelected()) {
            check = true;
        } else if(selectTurtleCheesecake.isSelected()) {
            check = true;
        }
        return check;
    }
}
