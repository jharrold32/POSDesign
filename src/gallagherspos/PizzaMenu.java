/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gallagherspos;

import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author TrollOutpost
 */
public class PizzaMenu extends javax.swing.JFrame implements PizzaValues{
    MainMenu mainMenu;
    
    int half = FIRST_HALF;
    
    
    private ArrayList<Integer> firstHalfToppings = new ArrayList<>();
    private ArrayList<Integer> secondHalfToppings = new ArrayList<>();
    private ArrayList<Integer> allToppings = new ArrayList<>();
    /**
     * Creates new form PizzaMenu
     * @param mm
     */
    public PizzaMenu(MainMenu mm) {
        initComponents();
        mainMenu = mm;
        crustGroup.add(setPan);
        crustGroup.add(setThin);
        crustGroup.add(setDeep);
        crustGroup.add(setCalzone);
        
        crustGroup.add(setTossed);
        sizeGroup.add(sizeSmall);
        sizeGroup.add(sizeMedium);
        sizeGroup.add(sizeLarge);
        sizeGroup.add(sizeXLarge);
        sizeGroup.add(sizeFamily);
        
        setFirstHalf.setVisible(false);
        setSecondHalf.setVisible(false);
        selectAll.setVisible(false);
        groupHalf.add(setFirstHalf);
        groupHalf.add(setSecondHalf);
        groupHalf.add(selectAll);
        
        //Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        //setBounds(0,0,screenSize.width, screenSize.height);
       
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        crustGroup = new javax.swing.ButtonGroup();
        toppingGroup = new javax.swing.ButtonGroup();
        sizeGroup = new javax.swing.ButtonGroup();
        groupHalf = new javax.swing.ButtonGroup();
        lblTitle = new javax.swing.JLabel();
        setPan = new javax.swing.JRadioButton();
        setTossed = new javax.swing.JRadioButton();
        setThin = new javax.swing.JRadioButton();
        setDeep = new javax.swing.JRadioButton();
        lblCrust = new javax.swing.JLabel();
        lblTopping = new javax.swing.JLabel();
        selectPepperoni = new javax.swing.JCheckBox();
        selectOnion = new javax.swing.JCheckBox();
        selectSpinach = new javax.swing.JCheckBox();
        selectAnchovies = new javax.swing.JCheckBox();
        selectFCheese = new javax.swing.JCheckBox();
        selectHotPepper = new javax.swing.JCheckBox();
        selectTomato = new javax.swing.JCheckBox();
        selectArtichokes = new javax.swing.JCheckBox();
        selectGPepper = new javax.swing.JCheckBox();
        selectItalianSausage = new javax.swing.JCheckBox();
        selectJalapenos = new javax.swing.JCheckBox();
        selectChicken = new javax.swing.JCheckBox();
        selectBacon = new javax.swing.JCheckBox();
        selectBOlive = new javax.swing.JCheckBox();
        selectGroundBeef = new javax.swing.JCheckBox();
        selectRedOnions = new javax.swing.JCheckBox();
        selectSSausage = new javax.swing.JCheckBox();
        selectCBacon = new javax.swing.JCheckBox();
        selectGOlive = new javax.swing.JCheckBox();
        selectPineapple = new javax.swing.JCheckBox();
        selectBananaPeppers = new javax.swing.JCheckBox();
        selectBrocolli = new javax.swing.JCheckBox();
        selectCauliflower = new javax.swing.JCheckBox();
        selectGarlic = new javax.swing.JCheckBox();
        selectMushrooms = new javax.swing.JCheckBox();
        lblSize = new javax.swing.JLabel();
        sizeSmall = new javax.swing.JRadioButton();
        sizeMedium = new javax.swing.JRadioButton();
        sizeLarge = new javax.swing.JRadioButton();
        sizeXLarge = new javax.swing.JRadioButton();
        sizeFamily = new javax.swing.JRadioButton();
        setCalzone = new javax.swing.JRadioButton();
        specPepClas = new javax.swing.JCheckBox();
        specSauCla = new javax.swing.JCheckBox();
        specVeg = new javax.swing.JCheckBox();
        specSpin = new javax.swing.JCheckBox();
        specGyro = new javax.swing.JCheckBox();
        specCheeseLover = new javax.swing.JCheckBox();
        specChickenAlf = new javax.swing.JCheckBox();
        specBBQC = new javax.swing.JCheckBox();
        specMed = new javax.swing.JCheckBox();
        specSChicken = new javax.swing.JCheckBox();
        specTaco = new javax.swing.JCheckBox();
        specCheesesteak = new javax.swing.JCheckBox();
        specArtichoke = new javax.swing.JCheckBox();
        specChiGour = new javax.swing.JCheckBox();
        specMeatLove = new javax.swing.JCheckBox();
        lblSpecial = new javax.swing.JLabel();
        specClasCom = new javax.swing.JCheckBox();
        specMonster = new javax.swing.JCheckBox();
        bClear = new javax.swing.JButton();
        bHalf = new javax.swing.JButton();
        setFirstHalf = new javax.swing.JRadioButton();
        setSecondHalf = new javax.swing.JRadioButton();
        bMessage = new javax.swing.JButton();
        bSubmit = new javax.swing.JButton();
        bDone = new javax.swing.JButton();
        selectAll = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);

        lblTitle.setText("Pizza");

        setPan.setText("Pan");
        setPan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPanActionPerformed(evt);
            }
        });

        setTossed.setText("Hand-tossed");
        setTossed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setTossedActionPerformed(evt);
            }
        });

        setThin.setText("Thin");
        setThin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setThinActionPerformed(evt);
            }
        });

        setDeep.setText("Deep");
        setDeep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setDeepActionPerformed(evt);
            }
        });

        lblCrust.setText("Select Crust");

        lblTopping.setText("Select Toppings");

        selectPepperoni.setText("Pepperoni");

        selectOnion.setText("Onion");

        selectSpinach.setText("Spinach");

        selectAnchovies.setText("Anchovies");

        selectFCheese.setText("Feta Cheese");

        selectHotPepper.setText("Hot Pepper Mix");

        selectTomato.setText("Tomato");

        selectArtichokes.setText("Artichokes");

        selectGPepper.setText("Green Pepper");

        selectItalianSausage.setText("Italian Sausage");

        selectJalapenos.setText("Jalapenos");

        selectChicken.setText("Chicken");

        selectBacon.setText("Bacon");

        selectBOlive.setText("Black Olive");

        selectGroundBeef.setText("Ground Beef");

        selectRedOnions.setText("Red Onions");

        selectSSausage.setText("Spicy Sausage");

        selectCBacon.setText("Canadian Bacon");

        selectGOlive.setText("Green Olive");

        selectPineapple.setText("Pineapple");

        selectBananaPeppers.setText("Banana Peppers");

        selectBrocolli.setText("Brocolli");

        selectCauliflower.setText("Cauliflower");

        selectGarlic.setText("Garlic");

        selectMushrooms.setText("Mushrooms");

        lblSize.setText("Size");

        sizeSmall.setText("Small (10\")");

        sizeMedium.setText("Medium (12\")");

        sizeLarge.setText("Large (14\")");

        sizeXLarge.setText("Extra Large (16\")");

        sizeFamily.setText("Family (18\")");

        setCalzone.setText("Calzone");
        setCalzone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setCalzoneActionPerformed(evt);
            }
        });

        specPepClas.setText("Pepperoni Classic");

        specSauCla.setText("Sausage Classic");

        specVeg.setText("Vegetarian");

        specSpin.setText("Spinach Trio");

        specGyro.setText("Gyro");

        specCheeseLover.setText("Cheese Lover");

        specChickenAlf.setText("Chicken Alfredo");

        specBBQC.setText("BBQ Chicken");

        specMed.setText("Mediterranean");

        specSChicken.setText("Southwest Chicken");

        specTaco.setText("Taco");

        specCheesesteak.setText("Cheesesteak");

        specArtichoke.setText("Artichoke Lover");

        specChiGour.setText("Chicken Gourmet");

        specMeatLove.setText("Meat Lovers");

        lblSpecial.setText("Specials");

        specClasCom.setText("Classic Combo");

        specMonster.setText("Gallagher's Monster");

        bClear.setText("Clear all");
        bClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bClearActionPerformed(evt);
            }
        });

        bHalf.setText("Half");
        bHalf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bHalfActionPerformed(evt);
            }
        });

        setFirstHalf.setText("FirstHalf");
        setFirstHalf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setFirstHalfActionPerformed(evt);
            }
        });

        setSecondHalf.setText("SecondHalf");
        setSecondHalf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setSecondHalfActionPerformed(evt);
            }
        });

        bMessage.setText("Message");
        bMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMessageActionPerformed(evt);
            }
        });

        bSubmit.setText("Submit");
        bSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSubmitActionPerformed(evt);
            }
        });

        bDone.setText("Done");
        bDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDoneActionPerformed(evt);
            }
        });

        selectAll.setText("All");
        selectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(setPan)
                            .addComponent(lblCrust)
                            .addComponent(setTossed)
                            .addComponent(setThin)
                            .addComponent(setDeep)
                            .addComponent(setCalzone))
                        .addGap(106, 106, 106)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sizeXLarge)
                            .addComponent(sizeLarge)
                            .addComponent(sizeMedium)
                            .addComponent(sizeSmall)
                            .addComponent(sizeFamily)
                            .addComponent(lblSize))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(specSauCla)
                                    .addComponent(specPepClas)
                                    .addComponent(specVeg)
                                    .addComponent(specSpin)
                                    .addComponent(specGyro)
                                    .addComponent(specClasCom))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(specChickenAlf)
                                            .addComponent(specCheeseLover)
                                            .addComponent(specBBQC)
                                            .addComponent(specMed)
                                            .addComponent(specSChicken))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(specCheesesteak)
                                            .addComponent(specTaco)
                                            .addComponent(specArtichoke)
                                            .addComponent(specChiGour)
                                            .addComponent(specMeatLove)))
                                    .addComponent(specMonster)))
                            .addComponent(lblSpecial)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(427, 427, 427)
                        .addComponent(lblTitle)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTopping)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectOnion)
                            .addComponent(selectPepperoni)
                            .addComponent(selectSpinach)
                            .addComponent(selectAnchovies)
                            .addComponent(selectFCheese))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectGPepper)
                            .addComponent(selectItalianSausage)
                            .addComponent(selectTomato)
                            .addComponent(selectArtichokes)
                            .addComponent(selectHotPepper))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectBOlive)
                            .addComponent(selectGroundBeef)
                            .addComponent(selectChicken)
                            .addComponent(selectBacon)
                            .addComponent(selectJalapenos))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectGOlive)
                            .addComponent(selectPineapple)
                            .addComponent(selectSSausage)
                            .addComponent(selectCBacon)
                            .addComponent(selectRedOnions))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectCauliflower)
                            .addComponent(selectBananaPeppers)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(selectGarlic)
                                    .addComponent(selectMushrooms)
                                    .addComponent(selectBrocolli))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(selectAll)
                                    .addComponent(setFirstHalf)
                                    .addComponent(setSecondHalf))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(bClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(bMessage)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(bSubmit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bDone, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(bHalf, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblTitle)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblCrust)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(setPan)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(setTossed)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(setThin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(setDeep)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(setCalzone))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSpecial)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(specTaco)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(specCheesesteak)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(specArtichoke)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(specChiGour)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(specMeatLove))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(specPepClas)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(specSauCla)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(specVeg)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(specSpin)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(specGyro))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(specCheeseLover)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(specChickenAlf)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(specBBQC)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(specMed)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(specSChicken))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(specClasCom)
                                    .addComponent(specMonster))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblTopping)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(selectPepperoni)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectOnion)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectSpinach)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectAnchovies)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectFCheese))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(selectItalianSausage)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectGPepper)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectTomato)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectArtichokes)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectHotPepper))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(selectGroundBeef)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectBOlive)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectChicken)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectBacon)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectJalapenos))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(selectPineapple)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectGOlive)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectSSausage)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectCBacon)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectRedOnions))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(selectMushrooms)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(selectGarlic))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(setFirstHalf)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(setSecondHalf)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(selectAll)
                                            .addComponent(selectBrocolli))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectCauliflower)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectBananaPeppers)))
                                .addGap(28, 28, 28))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bHalf)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(bMessage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(bSubmit)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bDone)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSize)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sizeSmall)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sizeMedium)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sizeLarge)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sizeXLarge)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sizeFamily)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(bClear)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setPanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPanActionPerformed
        if(sizeMedium.isEnabled()) {
            sizeGroup.clearSelection();
        } else if(sizeXLarge.isEnabled()) {
            sizeGroup.clearSelection();
        } else if(sizeFamily.isEnabled()) {
            sizeGroup.clearSelection();
        }
        sizeMedium.setEnabled(false);
        sizeXLarge.setEnabled(false);
        sizeFamily.setEnabled(false);
    }//GEN-LAST:event_setPanActionPerformed

    private void setCalzoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setCalzoneActionPerformed
        if(sizeMedium.isEnabled()) {
            sizeGroup.clearSelection();
        } else if(sizeFamily.isEnabled()) {
            sizeGroup.clearSelection();
        }
        sizeMedium.setEnabled(true);
        sizeXLarge.setEnabled(false);
        sizeFamily.setEnabled(false);
        
    }//GEN-LAST:event_setCalzoneActionPerformed

    private void setTossedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setTossedActionPerformed
        sizeMedium.setEnabled(true);
        sizeXLarge.setEnabled(true);
        sizeFamily.setEnabled(true);
    }//GEN-LAST:event_setTossedActionPerformed

    private void setThinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setThinActionPerformed
        sizeMedium.setEnabled(true);
        sizeXLarge.setEnabled(true);
        sizeFamily.setEnabled(true);
    }//GEN-LAST:event_setThinActionPerformed

    private void setDeepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDeepActionPerformed
        if(sizeMedium.isEnabled()) {
            sizeGroup.clearSelection();
        } else if(sizeXLarge.isEnabled()) {
            sizeGroup.clearSelection();
        } else if(sizeFamily.isEnabled()) {
            sizeGroup.clearSelection();
        }
        sizeMedium.setEnabled(false);
        sizeXLarge.setEnabled(false);
        sizeFamily.setEnabled(false);
    }//GEN-LAST:event_setDeepActionPerformed

    private void bHalfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bHalfActionPerformed
        if(!setFirstHalf.isVisible()) {
            setFirstHalf.setVisible(true);
            setSecondHalf.setVisible(true);
            selectAll.setVisible(true);
            setFirstHalf.setSelected(true);
        } else {
            int really = JOptionPane.showConfirmDialog(null, "Remove halves?", "Are you sure?", JOptionPane.YES_NO_OPTION);
            if(really == JOptionPane.YES_OPTION) {
                setFirstHalf.setVisible(false);
                setSecondHalf.setVisible(false);
                selectAll.setVisible(false);
                firstHalfToppings.clear();
                secondHalfToppings.clear();
                allToppings.clear();
                setFirstHalf.setSelected(false);
                setSecondHalf.setSelected(false);
            }
        }
    }//GEN-LAST:event_bHalfActionPerformed

    private void bClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bClearActionPerformed
        int sure = JOptionPane.showConfirmDialog(setCalzone, "Are you sure?");
        if(sure == JOptionPane.YES_OPTION) {
            crustGroup.clearSelection();
            sizeGroup.clearSelection();
            groupHalf.clearSelection();
            setFirstHalf.setVisible(false);
            setSecondHalf.setVisible(false);
            selectAll.setVisible(false);
            deselectToppings();
        }
    }//GEN-LAST:event_bClearActionPerformed

    private void bDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDoneActionPerformed
        if(checkButtons()) {
            int check = JOptionPane.showConfirmDialog(null, "There are items selected, are"
                    + " you sure you want to leave the menu?", "Are you sure?",
                    JOptionPane.YES_NO_OPTION);
            if(check == JOptionPane.YES_OPTION) {
                this.dispose();
            } else {
                // Do Nothing.
            }
        } else {
            this.dispose();
        }
    }//GEN-LAST:event_bDoneActionPerformed

    private void bMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMessageActionPerformed
        JOptionPane.showInputDialog(null, "Enter Message:");
    }//GEN-LAST:event_bMessageActionPerformed

    private void bSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSubmitActionPerformed
        PizzaItem pizza = new PizzaItem();
        if(setPan.isSelected()) {
            pizza.setCrust("Pan");
        } else if(setThin.isSelected()) {
            pizza.setCrust("Thin");
        } else if(setTossed.isSelected()) {
            pizza.setCrust("Hand");
        } else if(setCalzone.isSelected()) {
            pizza.setCrust("Calzone");
        } else if(setDeep.isSelected()) {
            pizza.setCrust("Deep");
        }
        crustGroup.clearSelection();
        sizeGroup.clearSelection();
        groupHalf.clearSelection();
        setFirstHalf.setVisible(false);
        setSecondHalf.setVisible(false);
        selectAll.setVisible(false);
        deselectToppings();
    }//GEN-LAST:event_bSubmitActionPerformed

    private void setFirstHalfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setFirstHalfActionPerformed
           if(half == FIRST_HALF) {
               firstHalfToppings = getHalfToppings();
               half = FIRST_HALF;
           } else {
               if(half == SECOND_HALF) {
                   secondHalfToppings = getHalfToppings();
               } else {
                   allToppings = getHalfToppings();
               }
               
               loadToppings(firstHalfToppings);
               half = FIRST_HALF;
           }
    }//GEN-LAST:event_setFirstHalfActionPerformed

    private void setSecondHalfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setSecondHalfActionPerformed
        if(half == SECOND_HALF) {
            secondHalfToppings = getHalfToppings();
            half = SECOND_HALF;
        } else {
            if(half == FIRST_HALF) {
                firstHalfToppings = getHalfToppings();
                
                
            } else {
                allToppings = getHalfToppings();
               
            }
            half = SECOND_HALF;
            loadToppings(secondHalfToppings);
        }
        
        
    }//GEN-LAST:event_setSecondHalfActionPerformed

    private void selectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllActionPerformed
        if(half == ALL) {
               allToppings = getHalfToppings();
               half = ALL;
           } else {
               if(half == SECOND_HALF) {
                   secondHalfToppings = getHalfToppings();
               } else {
                   allToppings = getHalfToppings();
               }
               loadToppings(allToppings);
               half = ALL;
           }
    }//GEN-LAST:event_selectAllActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PizzaMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                //new PizzaMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bClear;
    private javax.swing.JButton bDone;
    private javax.swing.JButton bHalf;
    private javax.swing.JButton bMessage;
    private javax.swing.JButton bSubmit;
    private javax.swing.ButtonGroup crustGroup;
    private javax.swing.ButtonGroup groupHalf;
    private javax.swing.JLabel lblCrust;
    private javax.swing.JLabel lblSize;
    private javax.swing.JLabel lblSpecial;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTopping;
    private javax.swing.JRadioButton selectAll;
    private javax.swing.JCheckBox selectAnchovies;
    private javax.swing.JCheckBox selectArtichokes;
    private javax.swing.JCheckBox selectBOlive;
    private javax.swing.JCheckBox selectBacon;
    private javax.swing.JCheckBox selectBananaPeppers;
    private javax.swing.JCheckBox selectBrocolli;
    private javax.swing.JCheckBox selectCBacon;
    private javax.swing.JCheckBox selectCauliflower;
    private javax.swing.JCheckBox selectChicken;
    private javax.swing.JCheckBox selectFCheese;
    private javax.swing.JCheckBox selectGOlive;
    private javax.swing.JCheckBox selectGPepper;
    private javax.swing.JCheckBox selectGarlic;
    private javax.swing.JCheckBox selectGroundBeef;
    private javax.swing.JCheckBox selectHotPepper;
    private javax.swing.JCheckBox selectItalianSausage;
    private javax.swing.JCheckBox selectJalapenos;
    private javax.swing.JCheckBox selectMushrooms;
    private javax.swing.JCheckBox selectOnion;
    private javax.swing.JCheckBox selectPepperoni;
    private javax.swing.JCheckBox selectPineapple;
    private javax.swing.JCheckBox selectRedOnions;
    private javax.swing.JCheckBox selectSSausage;
    private javax.swing.JCheckBox selectSpinach;
    private javax.swing.JCheckBox selectTomato;
    private javax.swing.JRadioButton setCalzone;
    private javax.swing.JRadioButton setDeep;
    private javax.swing.JRadioButton setFirstHalf;
    private javax.swing.JRadioButton setPan;
    private javax.swing.JRadioButton setSecondHalf;
    private javax.swing.JRadioButton setThin;
    private javax.swing.JRadioButton setTossed;
    private javax.swing.JRadioButton sizeFamily;
    private javax.swing.ButtonGroup sizeGroup;
    private javax.swing.JRadioButton sizeLarge;
    private javax.swing.JRadioButton sizeMedium;
    private javax.swing.JRadioButton sizeSmall;
    private javax.swing.JRadioButton sizeXLarge;
    private javax.swing.JCheckBox specArtichoke;
    private javax.swing.JCheckBox specBBQC;
    private javax.swing.JCheckBox specCheeseLover;
    private javax.swing.JCheckBox specCheesesteak;
    private javax.swing.JCheckBox specChiGour;
    private javax.swing.JCheckBox specChickenAlf;
    private javax.swing.JCheckBox specClasCom;
    private javax.swing.JCheckBox specGyro;
    private javax.swing.JCheckBox specMeatLove;
    private javax.swing.JCheckBox specMed;
    private javax.swing.JCheckBox specMonster;
    private javax.swing.JCheckBox specPepClas;
    private javax.swing.JCheckBox specSChicken;
    private javax.swing.JCheckBox specSauCla;
    private javax.swing.JCheckBox specSpin;
    private javax.swing.JCheckBox specTaco;
    private javax.swing.JCheckBox specVeg;
    private javax.swing.ButtonGroup toppingGroup;
    // End of variables declaration//GEN-END:variables

    private void deselectToppings() {
        
        selectAnchovies.setSelected(false);
        selectArtichokes.setSelected(false);
        selectBOlive.setSelected(false);
        selectBacon.setSelected(false);
        selectBananaPeppers.setSelected(false);
        selectBrocolli.setSelected(false);
        selectCBacon.setSelected(false);
        selectCauliflower.setSelected(false);
        selectChicken.setSelected(false);
        selectFCheese.setSelected(false);
        selectGOlive.setSelected(false);
        selectGPepper.setSelected(false);
        selectGarlic.setSelected(false);
        selectGroundBeef.setSelected(false);
        selectHotPepper.setSelected(false);
        selectItalianSausage.setSelected(false);
        selectJalapenos.setSelected(false);
        selectMushrooms.setSelected(false);
        selectOnion.setSelected(false);
        selectPepperoni.setSelected(false);
        selectPineapple.setSelected(false);
        selectRedOnions.setSelected(false);
        selectSSausage.setSelected(false);
        selectSpinach.setSelected(false);
        selectTomato.setSelected(false);
        specArtichoke.setSelected(false);
        specBBQC.setSelected(false);
        specCheeseLover.setSelected(false);
        specCheesesteak.setSelected(false);
        specChiGour.setSelected(false);
        specChickenAlf.setSelected(false);
        specClasCom.setSelected(false);
        specGyro.setSelected(false);
        specMeatLove.setSelected(false);
        specMed.setSelected(false);
        specMonster.setSelected(false);
        specPepClas.setSelected(false);
        specSChicken.setSelected(false);
        specSauCla.setSelected(false);
        specSpin.setSelected(false);
        specTaco.setSelected(false);
        specVeg.setSelected(false);
        
    }
    int checkToppings() {
        int numberOfToppings = 0;
        if(selectAnchovies.isSelected()) {
            numberOfToppings++;
        } 
        if(selectArtichokes.isSelected()) {
            numberOfToppings++;
        } 
        if(selectBOlive.isSelected()) {
            numberOfToppings++;
        }
        if(selectBacon.isSelected()) {
            numberOfToppings++;
        }
        if(selectBananaPeppers.isSelected()) {
            numberOfToppings++;
        }
        if(selectBrocolli.isSelected()) {
            numberOfToppings++;
        }
        if(selectCBacon.isSelected()) {
            numberOfToppings++;
        }
        if(selectCauliflower.isSelected()) {
            numberOfToppings++;
        }
        if(selectChicken.isSelected()) {
            numberOfToppings++;
        }
        if(selectFCheese.isSelected()) {
            numberOfToppings++;
        }
        if(selectGOlive.isSelected()) {
            numberOfToppings++;
        }
        if(selectGPepper.isSelected()) {
            numberOfToppings++;
        }
        if(selectGarlic.isSelected()) {
            numberOfToppings++;
        }
        if(selectGroundBeef.isSelected()) {
            numberOfToppings++;
        }
        if(selectHotPepper.isSelected()) {
            numberOfToppings++;
        }
        if(selectItalianSausage.isSelected()) {
            numberOfToppings++;
        }
        if(selectJalapenos.isSelected()) {
            numberOfToppings++;
        }
        if(selectMushrooms.isSelected()) {
            numberOfToppings++;
        }
        if(selectOnion.isSelected()) {
            numberOfToppings++;
        }
        if(selectPepperoni.isSelected()) {
            numberOfToppings++;
        }
        if(selectPineapple.isSelected()) {
            numberOfToppings++;
        }
        if(selectRedOnions.isSelected()) {
            numberOfToppings++;
        }
        if(selectSSausage.isSelected()) {
            numberOfToppings++;
        }
        if(selectSpinach.isSelected()) {
            numberOfToppings++;
        }
        if(selectTomato.isSelected()) {
            numberOfToppings++;
        }
        
        return numberOfToppings;
    }
    private double getPrice() {
        double thePrice = 0.0;
        if(setThin.isSelected()) {
            if(sizeSmall.isSelected()){
                thePrice += Prices.THIN_SMALL + checkToppings()*Prices.TOPPING_SMALL + 
                        getSpecial()*Prices.SPECIAL_SMALL_THIN;
            } else if(sizeMedium.isSelected()) {
                thePrice += Prices.THIN_MEDIUM + checkToppings()*Prices.TOPPING_MEDIUM + 
                        getSpecial()*Prices.SPECIAL_MEDIUM_THIN;
            } else if(sizeLarge.isSelected()) {
                thePrice += Prices.THIN_LARGE + checkToppings()*Prices.TOPPING_LARGE + 
                        getSpecial()*Prices.SPECIAL_LARGE_THIN;
            } else if(sizeXLarge.isSelected()) {
                thePrice += Prices.THIN_XLARGE + checkToppings()*Prices.TOPPING_XLARGE + 
                        getSpecial()*Prices.SPECIAL_XLARGE_THIN;
            } else if(sizeFamily.isSelected()) {
                thePrice += Prices.THIN_FAMILY + checkToppings()*Prices.TOPPING_FAMILY + 
                        getSpecial()*Prices.SPECIAL_FAMILY_THIN;
            }
        }
        if(setTossed.isSelected()) {
            if(sizeSmall.isSelected()){
                thePrice += Prices.HAND_SMALL + checkToppings()*Prices.TOPPING_SMALL + 
                        getSpecial()*Prices.SPECIAL_SMALL_HAND;
            } else if(sizeMedium.isSelected()) {
                thePrice += Prices.HAND_MEDIUM + checkToppings()*Prices.TOPPING_MEDIUM + 
                        getSpecial()*Prices.SPECIAL_MEDIUM_HAND;
            } else if(sizeLarge.isSelected()) {
                thePrice += Prices.HAND_LARGE + checkToppings()*Prices.TOPPING_LARGE + 
                        getSpecial()*Prices.SPECIAL_LARGE_HAND;
            } else if(sizeXLarge.isSelected()) {
                thePrice += Prices.HAND_XLARGE + checkToppings()*Prices.TOPPING_XLARGE + 
                        getSpecial()*Prices.SPECIAL_XLARGE_HAND;
            } else if(sizeFamily.isSelected()) {
                thePrice += Prices.HAND_FAMILY + checkToppings()*Prices.TOPPING_FAMILY + 
                        getSpecial()*Prices.SPECIAL_FAMILY_HAND;
            }
        }
        if(setPan.isSelected()) {
            if(sizeSmall.isSelected()){
                thePrice += Prices.PAN_SMALL + checkToppings()*Prices.TOPPING_SMALL + 
                        getSpecial()*Prices.SPECIAL_DEEP_SMALL;
            }  else if(sizeLarge.isSelected()) {
                thePrice += Prices.PAN_LARGE + checkToppings()*Prices.TOPPING_LARGE + 
                        getSpecial()*Prices.SPECIAL_DEEP_LARGE;
            
            } 
        }
        if(setDeep.isSelected()) {
            if(sizeSmall.isSelected()){
                thePrice += Prices.DEEP_SMALL + checkToppings()*Prices.TOPPING_SMALL + 
                        getSpecial()*Prices.SPECIAL_DEEP_SMALL;
            }  else if(sizeLarge.isSelected()) {
                thePrice += Prices.DEEP_LARGE + checkToppings()*Prices.TOPPING_LARGE + 
                        getSpecial()*Prices.SPECIAL_DEEP_LARGE;
            
            } 
        }
        if(setCalzone.isSelected()) {
            if(sizeSmall.isSelected()){
                thePrice += Prices.CALZONE_SMALL + checkToppings()*Prices.TOPPING_SMALL + 
                        getSpecial()*Prices.SPECIAL_SMALL_HAND;
            } else if(sizeMedium.isSelected()) {
                thePrice += Prices.CALZONE_MEDIUM + checkToppings()*Prices.TOPPING_MEDIUM + 
                        getSpecial()*Prices.SPECIAL_MEDIUM_HAND;
            } else if(sizeLarge.isSelected()) {
                thePrice += Prices.CALZONE_LARGE + checkToppings()*Prices.TOPPING_LARGE + 
                        getSpecial()*Prices.SPECIAL_LARGE_HAND;
            } 
        }
        return thePrice;
        
    }
    private double getSpecial() {
        double specials = 0.0;
        if(specArtichoke.isSelected()) {
            specials++;
        }
        if(specBBQC.isSelected()) {
            specials++;
        }
        if(specCheeseLover.isSelected()) {
            specials++;
        }
        if(specCheesesteak.isSelected()) {
            specials++;
        }
        if(specChiGour.isSelected()) {
            specials++;
        }
        if(specChickenAlf.isSelected()) {
            specials++;
        }
        if(specClasCom.isSelected()) {
            specials++;
        }
        if(specGyro.isSelected()) {
            specials++;
        }
        if(specMeatLove.isSelected()) {
            specials++;
        }
        if(specMed.isSelected()) {
            specials++;
        }
        if(specMonster.isSelected()) {
            specials++;
        }
        if(specPepClas.isSelected()) {
            specials++;
        }
        if(specSChicken.isSelected()) {
            specials++;
        }
        if(specSauCla.isSelected()) {
            specials++;
        }
        if(specSpin.isSelected()) {
            specials++;
        }
        if(specTaco.isSelected()) {
            specials++;
        }
        if(specVeg.isSelected()) {
            specials++;
        }
        return specials;
    }

    private ArrayList<Integer> getHalfToppings() {
        ArrayList<Integer> toppings = new ArrayList<>();
        if(selectAnchovies.isSelected()) {
            toppings.add(ANCHOVIES);
        } 
        if(selectArtichokes.isSelected()) {
            toppings.add(ARTICHOKE);
        } 
        if(selectBOlive.isSelected()) {
            toppings.add(BLACK_OLIVE);
        }
        if(selectBacon.isSelected()) {
            toppings.add(BACON);
        }
        if(selectBananaPeppers.isSelected()) {
            toppings.add(BANANA_PEPPERS);
        }
        if(selectBrocolli.isSelected()) {
            toppings.add(BROCOLLI);
        }
        if(selectCBacon.isSelected()) {
            toppings.add(CANADIAN_BACON);
        }
        if(selectCauliflower.isSelected()) {
            toppings.add(CAULIFLOWER);
        }
        if(selectChicken.isSelected()) {
            toppings.add(CHICKEN);
        }
        if(selectFCheese.isSelected()) {
            toppings.add(FETA);
        }
        if(selectGOlive.isSelected()) {
            toppings.add(GREEN_OLIVE);
        }
        if(selectGPepper.isSelected()) {
            toppings.add(GREEN_PEPPER);
        }
        if(selectGarlic.isSelected()) {
            toppings.add(GARLIC);
        }
        if(selectGroundBeef.isSelected()) {
            toppings.add(GROUND_BEEF);
        }
        if(selectHotPepper.isSelected()) {
            toppings.add(HOT_PEPPERS);
        }
        if(selectItalianSausage.isSelected()) {
            toppings.add(SAUSAGE);
        }
        if(selectJalapenos.isSelected()) {
            toppings.add(JALAPENOS);
        }
        if(selectMushrooms.isSelected()) {
            toppings.add(MUSHROOMS);
        }
        if(selectOnion.isSelected()) {
            toppings.add(ONION);
        }
        if(selectPepperoni.isSelected()) {
            toppings.add(PEPPERONI);
        }
        if(selectPineapple.isSelected()) {
            toppings.add(PINEAPPLE);
        }
        if(selectRedOnions.isSelected()) {
            toppings.add(RED_ONION);
        }
        if(selectSSausage.isSelected()) {
            toppings.add(SPICE_SAUSAGE);
        }
        if(selectSpinach.isSelected()) {
            toppings.add(SPINACH);
        }
        if(selectTomato.isSelected()) {
            toppings.add(TOMATO);
        }
        if(specArtichoke.isSelected()) {
            toppings.add(ARTICHOKE_LOVER);
        }
        if(specBBQC.isSelected()) {
            toppings.add(BBQ_CHICKEN);
        }
        if(specCheeseLover.isSelected()) {
            toppings.add(CHEESE_LOVER);
        }
        if(specCheesesteak.isSelected()) {
            toppings.add(CHEESESTEAK);
        }
        if(specChiGour.isSelected()) {
            toppings.add(GOURMET);
        }
        if(specChickenAlf.isSelected()) {
            toppings.add(CHICKEN_ALFREDO);
        }
        if(specClasCom.isSelected()) {
            toppings.add(CLASSIC_COMBO);
        }
        if(specGyro.isSelected()) {
            toppings.add(GYRO);
        }
        if(specMeatLove.isSelected()) {
            toppings.add(MEAT_LOVER);
        }
        if(specMed.isSelected()) {
            toppings.add(MEDITERRAINIAN);
        }
        if(specMonster.isSelected()) {
            toppings.add(MONSTER);
        }
        if(specPepClas.isSelected()) {
            toppings.add(PEPPERONI_CLASSIC);
        }
        if(specSChicken.isSelected()) {
            toppings.add(SOUTHWEST_CHICKEN);
        }
        if(specSauCla.isSelected()) {
            toppings.add(SAUSAGE_CLASSIC);
        }
        if(specSpin.isSelected()) {
            toppings.add(SPINACH_TRIO);
        }
        if(specTaco.isSelected()) {
            toppings.add(TACO);
        }
        if(specVeg.isSelected()) {
            toppings.add(VEGETARIAN);
        }
        return toppings;
    }

    private void loadToppings(ArrayList<Integer> toppings) {
        System.out.println("Loading toppings");
    
        deselectToppings();
        if(toppings.isEmpty()) {
            
        } else {
            for(int i = 0; i < toppings.size(); i++) {
                int topping = toppings.get(i);
                if(topping==PEPPERONI) {
                    selectPepperoni.setSelected(true);
                    
                } else if(topping == SAUSAGE) {
                    selectItalianSausage.setSelected(true);
                } else if(topping == ONION) {
                    selectOnion.setSelected(true);
                } else if(topping == GROUND_BEEF) {
                    selectGroundBeef.setSelected(true);
                } else if(topping == PINEAPPLE) {
                    selectPineapple.setSelected(true);
                } else if(topping == MUSHROOMS) {
                    selectMushrooms.setSelected(true);
                } else if(topping == GREEN_PEPPER) {
                    selectGPepper.setSelected(true);
                } else if(topping == BLACK_OLIVE) {
                    selectBOlive.setSelected(true);
                } else if(topping == GREEN_OLIVE) {
                    selectGOlive.setSelected(true);
                } else if(topping == GARLIC) {
                    selectGarlic.setSelected(true);
                } else if(topping == SPINACH) {
                    selectSpinach.setSelected(true);
                } else if(topping == TOMATO) {
                    selectTomato.setSelected(true);
                } else if(topping == CHICKEN) {
                    selectChicken.setSelected(true);
                } else if(topping == SPICE_SAUSAGE) {
                    selectSSausage.setSelected(true);
                } else if(topping == BROCOLLI) {
                    selectBrocolli.setSelected(true);
                } else if(topping == ARTICHOKE) {
                    selectArtichokes.setSelected(true);
                } else if(topping == ANCHOVIES) {
                    selectAnchovies.setSelected(true);
                } else if(topping == BACON) {
                    selectBacon.setSelected(true);
                } else if(topping == CANADIAN_BACON) {
                    selectCBacon.setSelected(true);
                } else if(topping == CAULIFLOWER) {
                    selectCauliflower.setSelected(true);
                } else if(topping == FETA) {
                    selectFCheese.setSelected(true);
                } else if(topping == HOT_PEPPERS) {
                    selectHotPepper.setSelected(true);
                } else if(topping == JALAPENOS) {
                    selectJalapenos.setSelected(true);
                } else if(topping == RED_ONION) {
                    selectRedOnions.setSelected(true);
                } else if(topping == BANANA_PEPPERS) {
                    selectBananaPeppers.setSelected(true);
                } 
                
                
                else if(topping == PEPPERONI_CLASSIC) {
                    specPepClas.setSelected(true);
                } else if(topping == SAUSAGE_CLASSIC) {
                    specSauCla.setSelected(true);
                } else if(topping == VEGETARIAN) {
                    specVeg.setSelected(true);
                } else if(topping == SPINACH_TRIO) {
                    specSpin.setSelected(true);
                } else if(topping == GYRO) {
                    specGyro.setSelected(true);
                } else if(topping == CLASSIC_COMBO) {
                    specClasCom.setSelected(true);
                } else if(topping == CHEESE_LOVER) {
                    specCheeseLover.setSelected(true);
                } else if(topping == CHICKEN_ALFREDO) {
                    specChickenAlf.setSelected(true);
                } else if(topping == BBQ_CHICKEN) {
                    specBBQC.setSelected(true);
                } else if(topping == MEDITERRAINIAN) {
                    specMed.setSelected(true);
                } else if(topping == SOUTHWEST_CHICKEN) {
                    specSChicken.setSelected(true);
                } else if(topping == MONSTER) {
                    specMonster.setSelected(true);
                } else if(topping == TACO) {
                    specTaco.setSelected(true);
                } else if(topping == CHEESESTEAK) {
                    specCheesesteak.setSelected(true);
                } else if(topping == ARTICHOKE_LOVER) {
                    specArtichoke.setSelected(true);
                } else if(topping == GOURMET) {
                    specChiGour.setSelected(true);
                } else if(topping == MEAT_LOVER) {
                    specMeatLove.setSelected(true);
                } 
            }
        }
    }

    private boolean checkButtons() {
        boolean check = false;
        if(selectAnchovies.isSelected()) {
            check = true;
        } 
        if(selectArtichokes.isSelected()) {
            check = true;
        } 
        if(selectBOlive.isSelected()) {
            check = true;
        }
        if(selectBacon.isSelected()) {
            check = true;
        }
        if(selectBananaPeppers.isSelected()) {
            check = true;
        }
        if(selectBrocolli.isSelected()) {
            check = true;
        }
        if(selectCBacon.isSelected()) {
            check = true;
        }
        if(selectCauliflower.isSelected()) {
            check = true;
        }
        if(selectChicken.isSelected()) {
            check = true;
        }
        if(selectFCheese.isSelected()) {
            check = true;
        }
        if(selectGOlive.isSelected()) {
            check = true;
        }
        if(selectGPepper.isSelected()) {
            check = true;
        }
        if(selectGarlic.isSelected()) {
            check = true;
        }
        if(selectGroundBeef.isSelected()) {
            check = true;
        }
        if(selectHotPepper.isSelected()) {
            check = true;
        }
        if(selectItalianSausage.isSelected()) {
            check = true;
        }
        if(selectJalapenos.isSelected()) {
            check = true;
        }
        if(selectMushrooms.isSelected()) {
            check = true;
        }
        if(selectOnion.isSelected()) {
            check = true;
        }
        if(selectPepperoni.isSelected()) {
            check = true;
        }
        if(selectPineapple.isSelected()) {
            check = true;
        }
        if(selectRedOnions.isSelected()) {
            check = true;
        }
        if(selectSSausage.isSelected()) {
            check = true;
        }
        if(selectSpinach.isSelected()) {
            check = true;
        }
        if(selectTomato.isSelected()) {
            check = true;
        }
        if(specArtichoke.isSelected()) {
            check = true;
        }
        if(specBBQC.isSelected()) {
            check = true;
        }
        if(specCheeseLover.isSelected()) {
            check = true;
        }
        if(specCheesesteak.isSelected()) {
            check = true;
        }
        if(specChiGour.isSelected()) {
            check = true;
        }
        if(specChickenAlf.isSelected()) {
            check = true;
        }
        if(specClasCom.isSelected()) {
            check = true;
        }
        if(specGyro.isSelected()) {
            check = true;
        }
        if(specMeatLove.isSelected()) {
            check = true;
        }
        if(specMed.isSelected()) {
           check = true;
        }
        if(specMonster.isSelected()) {
            check = true;
        }
        if(specPepClas.isSelected()) {
            check = true;
        }
        if(specSChicken.isSelected()) {
            check = true;
        }
        if(specSauCla.isSelected()) {
            check = true;
        }
        if(specSpin.isSelected()) {
            check = true;
        }
        if(specTaco.isSelected()) {
            check = true;
        }
        if(specVeg.isSelected()) {
            check = true;
        }
        if(sizeSmall.isSelected()) {
            check = true;
        }
        if(sizeMedium.isSelected()) {
            check = true;
        }
        if(sizeLarge.isSelected()) {
            check = true;
        }
        if(sizeXLarge.isSelected()) {
            check = true;
        }
        if(sizeFamily.isSelected()) {
            check = true;
        }
        if(setPan.isSelected()) {
            check = true;
        }
        if(setTossed.isSelected()) {
            check = true;
        }
        if(setThin.isSelected()) {
            check = true;
        }
        if(setDeep.isSelected()) {
            check = true;
        }
        if(setCalzone.isSelected()) {
            check = true;
        }
        return check;
    }
}
